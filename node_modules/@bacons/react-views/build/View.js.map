{"version":3,"file":"View.js","sourceRoot":"","sources":["../src/View.tsx"],"names":[],"mappings":";;;;;AAAA,kDAA8E;AAC9E,+CAOsB;AA8ItB,IAAI,IAAI,GAAG,mBAAsC,CAAC;AAElD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,wDAAwD;IACxD,IAAI,GAAG,SAAS,IAAI,CAAC,KAAgB;QACnC,MAAM,QAAQ,GAAG,eAAK,CAAC,OAAO,CAAC,GAAG,EAAE;YAClC,MAAM,QAAQ,GAAU,EAAE,CAAC;YAC3B,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;gBAC/C,IAAI,KAAK,IAAI,IAAI,EAAE;oBACjB,OAAO;iBACR;gBACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,iCAAiC;oBACjC,OAAO,CAAC,IAAI,CAAC,yCAAyC,KAAK,gDAAgD,CAAC,CAAC;oBAC7G,QAAQ,CAAC,IAAI,CAAC,8BAAC,mBAAI,IAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,eAAe,EAAE,WAAW,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE;;wBAAoB,8BAAC,mBAAI,IAAC,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,IAAG,KAAK,CAAQ;6BAAS,CAAC,CAAA;oBACtO,OAAO;iBACR;qBAAM,IAAI,OAAO,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,CAAA,KAAK,QAAQ,IAAI,uBAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;oBACnE,yCAAyC;oBACzC,MAAM,IAAI,KAAK,CAAC,yCAAyC,KAAK,CAAC,IAAI,+DAA+D,CAAC,CAAC;iBACrI;gBACD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;YACH,OAAO,QAAQ,CAAC;QAClB,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrB,OAAO,8BAAC,mBAAU,OAAK,KAAK,EAAE,QAAQ,EAAE,QAAQ,GAAI,CAAA;IACtD,CAAC,CAAA;CACF;AAED,kBAAe,IAAI,CAAC","sourcesContent":["import React, { ClassAttributes, ComponentProps, ComponentType } from 'react';\nimport {\n  StyleProp,\n  Text,\n  Platform,\n  View as NativeView,\n  AccessibilityRole,\n  ViewStyle as NativeViewStyle,\n} from 'react-native';\n\n// https://github.com/necolas/react-native-web/issues/832\n\ntype NativeViewProps = ComponentProps<typeof NativeView> & ClassAttributes<typeof NativeView>;\n\n/**\n * https://baconbrix.gitbook.io/react-native-web/primitives/view\n */\nexport interface WebViewStyle {\n  /** @platform web */\n  backdropFilter?: string;\n  /** @platform web */\n  animationDelay?: string;\n  /** @platform web */\n  animationDirection?: string;\n  /** @platform web */\n  animationDuration?: string;\n  /** @platform web */\n  animationFillMode?: string;\n  /** @platform web */\n  animationName?: string | any[];\n  /** @platform web */\n  animationIterationCount?: number | 'infinite';\n  /** @platform web */\n  animationPlayState?: string;\n  /** @platform web */\n  animationTimingFunction?: string;\n  /** @platform web */\n  backgroundAttachment?: string;\n  /** @platform web */\n  backgroundBlendMode?: string;\n  /** @platform web */\n  backgroundClip?: string;\n  /** @platform web */\n  backgroundImage?: string;\n  /** @platform web */\n  backgroundOrigin?: 'border-box' | 'content-box' | 'padding-box';\n  /** @platform web */\n  backgroundPosition?: string;\n  /** @platform web */\n  backgroundRepeat?: string;\n  /** @platform web */\n  backgroundSize?: string;\n  /** @platform web */\n  boxShadow?: string;\n  /** @platform web */\n  boxSizing?: string;\n  /** @platform web */\n  clip?: string;\n  /** @platform web */\n  cursor?: string;\n  /** @platform web */\n  filter?: string;\n  /** @platform web */\n  gridAutoColumns?: string;\n  /** @platform web */\n  gridAutoFlow?: string;\n  /** @platform web */\n  gridAutoRows?: string;\n  /** @platform web */\n  gridColumnEnd?: string;\n  /** @platform web */\n  gridColumnGap?: string;\n  /** @platform web */\n  gridColumnStart?: string;\n  /** @platform web */\n  gridRowEnd?: string;\n  /** @platform web */\n  gridRowGap?: string;\n  /** @platform web */\n  gridRowStart?: string;\n  /** @platform web */\n  gridTemplateColumns?: string;\n  /** @platform web */\n  gridTemplateRows?: string;\n  /** @platform web */\n  gridTemplateAreas?: string;\n  /** @platform web */\n  outline?: string;\n  /** @platform web */\n  outlineColor?: string;\n  /** @platform web */\n  overflowX?: string;\n  /** @platform web */\n  overflowY?: string;\n  /** @platform web */\n  overscrollBehavior?: 'auto' | 'contain' | 'none';\n  /** @platform web */\n  overscrollBehaviorX?: 'auto' | 'contain' | 'none';\n  /** @platform web */\n  overscrollBehaviorY?: 'auto' | 'contain' | 'none';\n  /** @platform web */\n  perspective?: string;\n  /** @platform web */\n  perspectiveOrigin?: string;\n  /** @platform web */\n  touchAction?: string;\n  /** @platform web */\n  transformOrigin?: string;\n  /** @platform web */\n  transitionDelay?: string;\n  /** @platform web */\n  transitionDuration?: string;\n  /** @platform web */\n  transitionProperty?: string;\n  /** @platform web */\n  transitionTimingFunction?: string;\n  /** @platform web */\n  userSelect?: string;\n  /** @platform web */\n  visibility?: string;\n  /** @platform web */\n  willChange?: string;\n  /** @platform web */\n  position?: 'static' | 'relative' | 'absolute' | 'fixed' | 'sticky';\n}\n\nexport type ViewStyle = Omit<NativeViewStyle, 'position'> & WebViewStyle;\n\nexport type WebViewProps = {\n  style?: StyleProp<ViewStyle>;\n\n  accessibilityRole?:\n  | 'list'\n  | 'listitem'\n  | 'complementary'\n  | 'contentinfo'\n  | 'region'\n  | 'navigation'\n  | 'main'\n  | 'article'\n  | 'banner'\n  | AccessibilityRole;\n\n  /** Float content to the center. `{ justifyContent: 'center', alignItems: 'center' }` */\n  center?: boolean;\n  hoverStyle?: ViewStyle;\n};\n\nexport type ViewProps = WebViewProps & Omit<NativeViewProps, 'style' | 'accessibilityRole'>;\n\nlet View = NativeView as ComponentType<ViewProps>;\n\nif (process.env.NODE_ENV !== 'production') {\n  // Add better errors and warnings in development builds.\n  View = function View(props: ViewProps) {\n    const children = React.useMemo(() => {\n      const children: any[] = [];\n      React.Children.forEach(props.children, (child) => {\n        if (child == null) {\n          return;\n        }\n        if (typeof child === 'string') {\n          // Wrap text in a Text component.\n          console.warn(`Invalid raw text as a child of View: \"${child}\". Wrap it with a Text component or remove it.`);\n          children.push(<Text style={{ position: 'absolute', top: 0, left: 0, bottom: 0, right: 0, backgroundColor: 'firebrick', color: 'white', fontSize: 24 }}>Unwrapped text: \"{<Text style={{ fontWeight: 'bold' }}>{child}</Text>}\"</Text>)\n          return;\n        } else if (typeof child?.type === 'string' && Platform.OS !== 'web') {\n          // Disallow react-dom elements on native.\n          throw new Error(`Using unsupported React DOM element \"<${child.type} />\" in React Native. Please remove this child from the View.`);\n        }\n        children.push(child);\n      });\n      return children;\n    }, [props.children]);\n    return <NativeView {...props} children={children} />\n  }\n}\n\nexport default View;\n"]}