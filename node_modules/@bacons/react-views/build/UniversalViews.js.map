{"version":3,"file":"UniversalViews.js","sourceRoot":"","sources":["../src/UniversalViews.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAA2D;AAC3D,+CAEsB;AAEtB,iDAA8C;AAC9C,oDAAoD;AACpD,2CAA2C;AAC3C,kDAAiD;AACjD,2CAAuC;AACvC,kDAAiD;AAEjD,SAAS,qBAAqB,CAC1B,IAAW,EACX,EACI,KAAK,EACL,MAAM,EACN,GAAG,KAAK,EAC0C,EACtD,YAA8B;IAE9B,kCAAkC;IAClC,MAAM,UAAU,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;;QAC5B,MAAM,aAAa,GAAG,MAAA,IAAA,2BAAY,EAAC,KAAK,CAAC,mCAAI,EAAE,CAAC;QAChD,IAAI,MAAM,EAAE;YACR,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;SACzC;QACD,OAAO,aAAa,CAAC;IACzB,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;IAEpB,MAAM,KAAK,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACvB,IAAI,KAAK,CAAC,UAAU,EAAE;YAClB,OAAO,IAAA,kBAAU;YACb,mBAAmB;YACnB,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CACnC,CAAC;SACL;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;IAEvB,OAAO;IACH,mBAAmB;IACnB,8BAAC,KAAK,IAAC,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,KAAM,KAAK,GAAI,CAC7D,CAAC;AACN,CAAC;AAED,SAAS,eAAe,CACpB,IAAI,EACJ,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,KAAK,EAAa,EAC1C,YAAY;IAEZ,MAAM,OAAO,GAAG,IAAA,cAAM,EAAC,IAAI,CAAC,CAAC;IAC7B,MAAM,MAAM,GAAG,IAAA,wBAAY,EAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IACnD,MAAM,KAAK,GAAG,IAAA,oBAAQ,EAAC,OAAO,CAAC,CAAC;IAEhC,MAAM,UAAU,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtB,OAAO,CAAC,GAAG,KAAK,EAAE,KAAK,IAAI,UAAU,CAAC,CAAC;SAC1C;QACD,OAAO,CAAC,KAAK,EAAE,KAAK,IAAI,UAAU,CAAC,CAAC;IACxC,CAAC,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;IAE/B,OAAO,8BAAC,IAAI,IAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,KAAM,KAAK,GAAI,CAAC;AAC/D,CAAC;AAEY,QAAA,IAAI,GAAG,IAAA,kBAAU,EAC1B,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,cAAY,CAAC,CACf,CAAC;AACvB,QAAA,IAAI,GAAG,IAAA,kBAAU,EAC1B,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,cAAY,CAAC,CACf,CAAC;AACvB,QAAA,KAAK,GAAG,IAAA,kBAAU,EAC3B,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,eAAa,CAAC,CACf,CAAC;AAErC,MAAM,MAAM,GAAG,yBAAU,CAAC,MAAM,CAAC;IAC7B,MAAM,EAAE;QACJ,cAAc,EAAE,QAAQ;QACxB,UAAU,EAAE,QAAQ;KACvB;CACJ,CAAC,CAAC","sourcesContent":["import React, { forwardRef, useMemo, useRef } from \"react\";\nimport {\n    StyleSheet,\n} from \"react-native\";\n\nimport { filterStyles } from \"./filterStyles\";\nimport UpstreamImage, { ImageProps } from \"./Image\";\nimport { useMergeRefs } from \"./mergeRefs\";\nimport UpstreamText, { TextProps } from \"./Text\";\nimport { useHover } from \"./useEvents\";\nimport UpstreamView, { ViewProps } from \"./View\";\n\nfunction createPsuedoClassView<TView, TViewProps extends { style?: any }>(\n    View: TView,\n    {\n        style,\n        center,\n        ...props\n    }: TViewProps & { center?: boolean; hoverStyle?: any },\n    forwardedRef: React.Ref<TView>\n) {\n    // Filter and apply `center` prop.\n    const finalStyle = useMemo(() => {\n        const filteredStyle = filterStyles(style) ?? {};\n        if (center) {\n            return [styles.center, filteredStyle];\n        }\n        return filteredStyle;\n    }, [style, center]);\n\n    const Klass = useMemo(() => {\n        if (props.hoverStyle) {\n            return forwardRef(\n                // @ts-expect-error\n                createHoverView.bind(this, View)\n            );\n        }\n        return View;\n    }, [props.hoverStyle]);\n\n    return (\n        // @ts-expect-error\n        <Klass ref={forwardedRef} style={finalStyle} {...props} />\n    );\n}\n\nfunction createHoverView(\n    View,\n    { hoverStyle, style, ...props }: ViewProps,\n    forwardedRef\n) {\n    const hostRef = useRef(null);\n    const setRef = useMergeRefs(forwardedRef, hostRef);\n    const hover = useHover(hostRef);\n\n    const finalStyle = useMemo(() => {\n        if (Array.isArray(style)) {\n            return [...style, hover && hoverStyle];\n        }\n        return [style, hover && hoverStyle];\n    }, [style, hoverStyle, hover]);\n\n    return <View ref={setRef} style={finalStyle} {...props} />;\n}\n\nexport const View = forwardRef(\n    createPsuedoClassView.bind(this, UpstreamView)\n) as React.ComponentType<ViewProps>;\nexport const Text = forwardRef(\n    createPsuedoClassView.bind(this, UpstreamText)\n) as React.ComponentType<TextProps>;\nexport const Image = forwardRef(\n    createPsuedoClassView.bind(this, UpstreamImage)\n) as React.ComponentType<ImageProps>;\n\nconst styles = StyleSheet.create({\n    center: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n});\n"]}